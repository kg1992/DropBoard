============================================================
== 170415
============================================================

// testing code. tried to find 2017.txt and reutrn the content
app.get('/2017.txt', function(req, res) {
  try {
    dbx.filesDownload({
        path: '/notes/2017.txt'
      })
      .then(function(data) {
        try {
          var s = utf8.decode(data.fileBinary);
          res.send(s);
        }
        catch (e) {
          console.log('failed to retrieve 2017.txt');
          console.log(e);
          res.send(e.message);
        }
      });
  }
  catch (e) {
    console.log('request to drpobox failed. reason:');
    console.log(e);
  }
});

============================================================
== 170417
============================================================

// -- trashed. reason : not used anymore --
// Serves flie list. the last of the url is path to the request folder
app.get('/ajax/list/*', function(req, res) {
  // debug output
  // console.log(req.originalUrl);
  var req_path = req.originalUrl;
  req_path = req_path.substr(req_path.indexOf('/', '/ajax/list'.length));

  dbx.filesListFolder({
      path: req_path
    })
    .then(function(r) {
      res.send(r);
    })
    .catch(function(e) {
      console.log(e);
      res.send(e);
    });

});

============================================================
== 170420
============================================================

// -- trashed reason : the code is valid on server side, but cannot be used on client side.
var get_note_content = function(dbx, req_path) {
    return new Promise(function(resolve, reject) {
        // Start downloading from dropbox
        // ref : http://dropbox.github.io/dropbox-sdk-js/Dropbox.html#filesDownload__anchor
        dbx.filesDownload({
                path: req_path
            })
            .then(function(data) {
                // // debug output
                // console.log(data);
                // decode file
                var s = utf8.decode(data.fileBinary);
                resolve(data);
            })
            .catch(function(e) {
                reject(e);
            });
    });
}

// -- trashed reason : not needed anymore. left for further reference
var save_content = function() {
    // if no file is currently open
    if (current_file == "") {
        // ask note name with modal box
        var form = document.getElementById('myModal');
        var modal = new Modal(form);
        form.onokay = function() {
            var modal_inputs = form.getElementsByClassName('modal_input');
            // put .txt extension if not present
            var extension_begin = current_file.lastIndexOf(current_file, '.');
            if (extension_begin == -1 || current_file.substr(extension_begin) != ".txt") {
                extension_begin += ".txt";
            }
            // set current file name
            current_file = modal_inputs[0].value;
            // start saving
            save_content();
        }
        modal.trigger();
        return;
    }

    // build url
    var url = service_url + '/ajax/up/notes/' + current_file;
    // get data
    var data = {
        content: $('#content_view').val()
    };
    // send ajax
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        contentType: 'application/json',
        success: function(data) {
            console.log("success");
        }
    });
};

============================================================

    var getFileName = function(path) {
      var index = selectedPath.lastIndexOf('/');
      if (index == -1) index = selectedPath.lastIndexOf('\\');
      if (index == -1)
        return path;
      return selectedPath.substr(index);
    };
    
============================================================

		// Expects first argument of 'notes_model'
		// 'out' must be a valid HTTP list element(ul or ol) that can contain 'li' elements.
		// 'click_event' must be provided to support interaction. each entry of 'note_model.entries' will be passed
		this.format_notes_model = function(nm, out, click_event) {
			if (!nm) throw this.name + 'format_notes_model : nm is null';

			nm.entries.forEach(function(entry) {
				var $tag = $('<li class=\"menuItem\">' +
					'<a>' +
					get_note_name(entry.name) +
					'</a>' +
					'</li>').appendTo(out);

				// handles click event
				$tag.on("click", function() {
					if (click_event) click_event(entry);
				});
			});
		}
		
		
============================================================

    // ----------------------------------------
    // Search Support
    // var $si = $('#search_input');
    // var onSearchInput = function() {
    //   var $lis = $('#note_list li');
    //   $lis.css('display', 'none');
    //   for (var i = 0; i < $lis.length; ++i) {
    //     var li = $lis[i];
    //     if (li.textContent.toLowerCase().indexOf($si.val()) != -1)
    //       $(li).css('display', 'block');
    //   }
    // };
    // if ($si) {
    //   var si = $si.get()[0];
    //   if (si.addEventListener) {
    //     si.addEventListener('input', onSearchInput);
    //   }
    //   else if (si.attachEvent) {
    //     si.attachEvent('onpropertychange', onSearchInput);
    //   }
    // }
    
============================================================



      // // ----------------------------------------
      // // add name input area response
      // var $addName = $("#add_name");
      // $addName.on('keyup', function(e) {
      //   var name = $addName.val();
      //   if (name == "")
      //     return;
      //   if (e.keyCode == 13) {
      //     // http://stackoverflow.com/questions/1531093/how-do-i-get-the-current-date-in-javascript
      //     var utc = new Date().toJSON().slice(0, 10).replace(/-/g, '/');
      //     push_note_content(dbx, "/Notes/" + name, "new note created at " + utc)
      //       .then(function(res) {
      //         refreshNoteList(dbx);
      //       })
      //       .catch(function(e) {
      //         console.log(e);
      //       });
      //     $addName.css('display', 'none');
      //   }

      //   // http://stackoverflow.com/questions/3369593/how-to-detect-escape-key-press-with-javascript-or-jquery
      //   else if (e.keyCode == 27) {
      //     console.log('user canceled');
      //     $addName.css('display', 'none');
      //     return;
      //   }
      // });

      // // ----------------------------------------
      // // trash button handler
      // var $trashButton = $('#trash_button');
      // $trashButton.on('click', function(e) {
      //   var name = selected.name;

      //   console.log('Trashing \'' + name + '\'...');

      //   push_delete(dbx, "/Notes/" + name)
      //     .then(function(data) {
      //       $('#content_view').css('display', 'none');
      //       $('#mdView').css('display', 'none');
      //       // refreshNoteList(dbx);
      //       console.log('\'' + name + '\' has been trashed.');
      //     })
      //     .catch(function(e) {
      //       console.log(e);
      //     });
      // });

============================================================

var get_note_name = function(file_name) {
			if (!file_name) throw new 'get_note_name : file_name is null';

			var path_end = file_name.lastIndexOf('/');
			if (path_end != -1) {
				file_name = file_name.substr(path_end + 1);
			}

			var ext_begin = file_name.lastIndexOf('.');
			if (ext_begin != -1) {
				file_name = file_name.substr(0, ext_begin);
			}

			return file_name;
		};
============================================================
============================================================
============================================================



